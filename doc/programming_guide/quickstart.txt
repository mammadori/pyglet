Writing a pyglet application
============================

Getting started with a new library or framework can be daunting, especially
when presented with a large amount of reference material to read.  This
chapter gives a very quick introduction to pyglet without covering any of the
details.

.. contents::
    :local:

Hello, World
------------

We'll begin with the requisite "Hello, World" introduction.  This program will
open a window with some text in it and wait to be closed.  You can find the
entire program in the ``examples/programming_guide/hello_world.py`` file.

Begin by importing the modules from pyglet that we need::

    from pyglet import font
    from pyglet import window

Create a `Window` by calling its default constructor.  The window will be
visible as soon as it's created, and will have reasonable default values for
all its parameters::

    win = window.Window()

To display the text, we'll create a `font.Text`.  The text requires a font,
which we'll load from the system::

    ft = font.load('Arial', 36)
    text = font.Text(ft, 'Hello, World!')

Every pyglet application requires a "run loop".  You'll always need to write
this loop yourself.  Within the loop, we need to:

* Update events for the window.  If you forget to do this, the window will
  appear to "hang" and be unresponsive.
* Clear the window
* Draw the contents of the window.

The run loop is shown below::

    while not win.has_exit:
        win.dispatch_events()
        win.clear()
        text.draw()
        win.flip()

By default, windows in pyglet are double-buffered, which is necessary for
flicker-free animation.  The `flip` method makes all previous drawing
operations visible.

Image viewer
------------

Most games will need to load and display images on the screen.  In this
example we'll load an image and display it within the window::

    from pyglet import image
    from pyglet import window

    win = window.Window()

    img = image.load('kitten.jpg')

    while not win.has_exit:
        win.dispatch_events()
        win.clear()
        img.blit(0, 0)
        win.flip()

We used the `image.load` function to load the image, and `AbstractImage.blit`
method to draw it to the window.  The arguments ``(0, 0)`` tell pyglet to draw
the image at pixel coordinates 0, 0 in the window (the lower-left corner).

The complete code for this example is located in
``examples/programming_guide/image_viewer.py``.

Handling mouse and keyboard events
----------------------------------

The ``dispatch_events`` method seen in the previous examples not only takes
care of keeping the application responsive, it also calls any event handlers
you install on the window.

There are several ways to attach an event; the most straight-forward is to
simply replace the method on the `Window` with your own function::

    from pyglet import window

    def on_key_press(symbol, modifiers):
        print 'A key was pressed.'

    win = window.Window()
    win.on_key_press = on_key_press

Remember to also write a run loop that calls `dispatch_events` every
iteration.

Keyboard events have two parameters: the virtual key `symbol` that was
pressed, and a bitwise combination of any `modifiers` that are present (for
example, the ``CTRL`` and ``SHIFT`` keys).

The key symbols are defined in `pyglet.window.key`::

    from pyglet.window import key

    def on_key_press(symbol, modifiers):
        if symbol == key.A:
            print 'The "A" key was pressed.'
        elif symbol == key.LEFT:
            print 'The left arrow key was pressed.'
        elif symbol == key.ENTER:
            print 'The enter key was pressed.'

See the `pyglet.window.key` documentation for a complete list of key symbols.

Mouse events are handled in a similar way::

    from pyglet.window import mouse

    def on_mouse_press(x, y, button, modifiers):
        if button == mouse.LEFT:
            print 'The left mouse button was pressed.'

    win.on_mouse_press = on_mouse_press

The ``x`` and ``y`` parameters give the position of the mouse when the button
was pressed, relative to the lower-left corner of the window.

There are more than 20 event types that you can handle on a window.  The
easiest way to find the event name and parameters you need is to add the
following line to your program::

    from pyglet.window import event

    win.push_handlers(event.WindowEventLogger())

This will cause all events received on the window to be printed to the
console.

An example program using keyboard and mouse events is in
``examples/programming_guide/events.py``

Playing sounds and music
------------------------

pyglet makes it easy to play and mix multiple sounds together in your game.
The following example plays an MP3 file [#mp3]_::

    from pyglet import media

    music = media.load('music.mp3')
    music.play()

Short sounds, such as a gunfire shot used in a game should be decoded in
memory before they are used, so that they play more immediately and incur less
of a CPU performance penalty.  Specify ``streaming=False`` in this case::

    sound = media.load('shot.wav', streaming=False)
    sound.play()

Regardless of whether you are using streaming or non-streaming sounds, you
must call `media.dispatch_events` in your run loop, in the same way that you
do for `Window.dispatch_events`::

    while not win.has_exit:
        win.dispatch_events()
        media.dispatch_events()

The ``media_player.py`` example demonstrates playback of streaming audio and
video using pyglet.  The ``noisy/noisy.py`` example demonstrates playing many
short audio samples simultaneously, as in a game.

.. [#mp3] MP3 and other compressed audio formats require AVbin to be installed
          (this is the default for the Windows and Mac OS X installers).
          Uncompressed WAV files can be played without AVbin.

Where to next?
--------------

The examples presented in this chapter should have given you enough
information to get started writing simple arcade and point-and-click-based
games.

The remainder of this programming guide goes into quite technical detail
regarding some of pyglet's features.  While getting started, it's recommended
that you skim the beginning of each chapter but not attempt to read through
the entire guide from start to finish.

To write 3D applications or achieve optimal performance in your 2D
applications you'll need to work with OpenGL directly.  The canonical
references for OpenGL are `The OpenGL Programming Guide`_ and 
`The OpenGL Shading Language`_.

There are numerous examples of pyglet applications in the ``examples/``
directory.  Keep checking http://www.pyglet.org/ for more examples and
tutorials as they are written.

.. _The OpenGL Programming Guide: http://opengl.org/documentation/books/#the_opengl_programming_guide_the_official_guide_to_learning_opengl_version
.. _The OpenGL Shading Language: http://opengl.org/documentation/books/#the_opengl_shading_language_2nd_edition
