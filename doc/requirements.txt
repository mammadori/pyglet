Functional Requirements
=======================

This document is parsed by tests/test.py to produce the test cases and
test reports.  See test.py for an overview of how this all works.

Keep the formatting of this file within reStructured text.  Sections
are designated with definition lists; section descriptions and the
implementation table appear within fields.  (One implementation table per
section).

Add a component by adding a row to the appropriate implementation table.  Add
a capability by adding a column where it's needed.  Keep these names to
lower/UPPER case respectively, no non-alphanumeric chars.

Mark off progress for each component/capability pair with:

+---+--------------------------------------------+
| X | Implemented                                |
+---+--------------------------------------------+
| D | In development (requires --developer)      |
+---+--------------------------------------------+
| / | Partially implemented (ignored by test.py) |
+---+--------------------------------------------+
|   | Not yet implemented.                       |
+---+--------------------------------------------+

Outside of these boundaries, add any valid reStructured text within
or outside of sections to describe higher-level concerns; this will
be conveniently ignored by test.py.

window
    :description: Platform windowing and events.
    :implementation:
        ============================== === === ===
        Component                      X11 WIN OSX
        ============================== === === ===
        WINDOW_OPEN                     X   X   X
        MULTIPLE_WINDOW_OPEN            X   X   X
        EVENT_KEY                       X   X   X
        EVENT_TEXT                      X   X   X
        EVENT_BUTTON                    X   X   X
        EVENT_MOUSE_MOTION              X   X   X
        EVENT_MOUSE_DRAG                X   X   X
        EVENT_MOUSE_ENTER_LEAVE         X   X   X
        EVENT_MOUSE_SCROLL              X   X   X
        EVENT_CLOSE                     X   X   X
        EVENT_EXPOSE                    X   X   X
        EVENT_RESIZE                    X   X   X
        EVENT_MOVE                      X   X   X
        EVENT_ACTIVATE_DEACTIVATE       X   X   X
        EVENT_SHOW_HIDE                 X   X   X
        WINDOW_SET_LOCATION             X   X   X
        WINDOW_SET_SIZE                 X   X   X
        WINDOW_SET_MIN_MAX_SIZE         X   X   X
        WINDOW_ACTIVATE                 X   X   X
        WINDOW_SET_VISIBLE              X   X   X
        WINDOW_MINIMIZE_MAXIMIZE        X   X   X
        WINDOW_SET_EXCLUSIVE_MOUSE      X   X   X
        WINDOW_SET_EXCLUSIVE_KEYBOARD   X   X   X
        WINDOW_SET_FULLSCREEN           X   X   X
        WINDOW_SET_VSYNC                X   X   X
        WINDOW_INITIAL_FULLSCREEN       X   X   X
        WINDOW_CAPTION                  X   X   X
        WINDOW_BORDERS                  
        WINDOW_ICON
        WINDOW_CURSOR
        WINDOW_SET_MOUSE_VISIBLE        X
        WINDOW_SET_MOUSE_CURSOR         X
        MULTIPLE_SCREEN                 X   X   X
        CONTEXT_SHARE                   X   X   X
        ============================== === === ===

    TBD:
     - better failure handling when eg. GLX is not available
     - all platforms: update GL context when configuration changes
        (e.g. requesting another buffer)
     - poll: which platforms can do borderless/translucent GL windows?

       OS X: http://developer.apple.com/samplecode/BoingX/index.html

       xlib: http://www.faqs.org/faqs/graphics/opengl-faq/part3/
             (borderless window, not translucent)
     - OS X does not receive motion events when window doesn't have
       focus; ensure this is also the case for other platforms (or
       find workaround for Carbon).
     - event for context-menu invocation (right-mouse button, ctrl+click
       on mac, menu key on some keyboards).
     - OS X apps require a unique 4 character creator code.  I have
       registered "PYGL" with Apple, which can be the default; there
       should probably also be a mechanism for people to use their own
       creator codes instead.
     - X11 apps have a WM_CLASS - we should allow programmers to supply
       a class name. Should we default it?
     - events for system sleep/shutdown and display change?
     - method to disable screensaver?
     - windows appearing on different devices cannot share context.
       there should be a mechanism for dealing with this (besides
       crashing).  moving a window from one device to another should
       recreate the context automatically, and fire an event
       (on_context_lost) to instruct the application to reload everything.
       a similar event (on_context_state_lost) should be fired when
       a context is replaced (for example, toggling fullscreen): in this
       case the app doesn't need to reload objects, but will need to
       reset the state.  yikes.
     - xlib and carbon: window caption is lost when recreating window.
     - Possible window borders (check that all platforms have reasonable
       support):

        - None
        - Resizable (default)
        - Fixed
        - Palette (smaller footprint)

       With these options:
        - Maximize button
        - Minimize button
        - Close button / system menu
        - Modal (specify parent)

event
    :description: Platform-independent events.
    :implementation:
        ============================== === === ===
        Component                      X11 WIN OSX
        ============================== === === ===
        ============================== === === ===

clock
    :description: High-resolution timing, scheduling and FPS measurement.
    :implementation:
        ============================== === === ===
        Component                      X11 WIN OSX
        ============================== === === ===
        TICK                            X   X   X
        FPS                             X   X   X
        FPS_LIMIT                       X   X   X
        SCHEDULE                        X   X   X
        SCHEDULE_INTERVAL               X   X   X
        SCHEDULE_ONCE                   X   X   X
        ============================== === === ===

console
    :description: Interactive debug "widget".

    TBD:
     - move to pyglet.gui

resource
    :description: resource XML file loader.
    :implementation:
        ============================== =======
        Component                      GENERIC
        ============================== =======
        COMPLIANCE                        X
        REQUIRE                           X
        ============================== =======

scene2d
    :description: 2D scenes with tile maps and sprites.
    :implementation:
        ============================== =======
        Component                      GENERIC
        ============================== =======
        MAP_MODEL                         X
        LOAD_IMAGE                        X
        LOAD_IMAGEATLAS                   X
        LOAD_TILESET                      X
        LOAD_RECTMAP                      X
        LOAD_HEXMAP                       X
        MAP_SAVE                           
        SPRITE_MODEL                      X
        SPRITE_OVERLAP                    X
        FLAT_SPRITE                       X
        RECT_FLAT_DEBUG                   X
        HEX_FLAT_DEBUG                    X
        FLAT_SCROLLING                    X
        FLAT_OOB                          X
        RECT_FLAT_MOUSE                   X
        HEX_FLAT_MOUSE                    X
        VIEW_SUBWINDOW                    X
        ============================== =======

    TBD:
     - OBB or AABB collision before occlusion query
     - animated sprites, or animated textures
     - @for_cells needs to look up properties on TileSets
     - @for_cells / @for_sprites need to be pre-evaluated
     - sprites in groups (for collision detection, mostly)

model
    :description: Abstract interface for 3D modelling.

    TBD:
     - support for the DirectX model format would be good as it has
       animations and skellingtons.
     - according to DESIGN, this should be in scene3d

    obj
        :description: Wavefront OBJ support.
        :implementation:
            ============================== =======
            Component                      GENERIC
            ============================== =======
            OBJ_LOAD                          X
            ============================== =======
        
    geometric
        :description: Parametric 3D geometry support.

        TBD:
         - integrate with euclid.  Consistent draw/collide/response
           interface
        
image
    :description: Image file load and save.
    :implementation:
        ============================== === === ===
        Component                      X11 WIN OSX
        ============================== === === ===
        CHECKERBOARD                    X   X   X
        PYPNG_RGBA_LOAD                 X   X   X
        PYPNG_RGBA_SAVE                 X   X   X
        PYPNG_RGB_LOAD                  X   X   X
        PYPNG_RGB_SAVE                  X   X   X
        PYPNG_LA_LOAD                   X   X   X
        PYPNG_LA_SAVE                   X   X   X
        PYPNG_L_LOAD                    X   X   X
        PYPNG_L_SAVE                    X   X   X
        PIL_RGBA_LOAD                   X   X   X
        PIL_RGBA_SAVE                   X   X   X
        PIL_RGB_LOAD                    X   X   X
        PIL_RGB_SAVE                    X   X   X
        PIL_LA_LOAD                     X   X   X
        PIL_LA_SAVE                     X   X   X
        PIL_L_LOAD                      X   X   X
        PIL_L_SAVE                      X   X   X
        PLATFORM_RGBA_LOAD              X   X   X
        PLATFORM_RGB_LOAD               X   X   X
        PLATFORM_LA_LOAD                X   X   X
        PLATFORM_L_LOAD                 X   X   X
        DDS_DXT1_LOAD                        
        DDS_DXT1_SAVE                        
        DDS_DXT3_LOAD                        
        DDS_DXT3_SAVE                        
        DDS_DXT5_LOAD                   X   X   X
        DDS_DXT5_SAVE                        
        BUFFER_SAVE                     X   X   X
        DEPTH_SAVE                      X   X   X
        TEXTURE_GRID                    X   X   X
        TEXTURE_3D                      X   X   X
        ============================== === === ===

    TBD:
     - QuickTime decoder assumes RGBA; need to accept RGB etc also.
     - Windows 2000?  (GDI+ is XP only)
     - Non-Gdk soln for Linux (i.e., KDE?)
     - Get public domain or copyleft test images.
     - Tests for formats all platforms should support.  Probably
       PNG, JPEG, GIF, TIFF, BMP.
     - DDS saving
     - Software decoder/encoder for compressed texture.
     - Options for saving: compression level?

shader
    :description: Abstract interface to GLSL.
    
    TBD:
     - documentation (this is actually no worse documented than anything
       else...)
     - sample shaders
     - what about creating shader trees?
     - what is the value of the usexx methods on ShaderProgram?  do
       we like wrapping objects around GL?

text
    :description: Text rendering.
    :implementation:
        ============================== === === ===
        Component                      X11 WIN OSX
        ============================== === === ===
        DEFAULT                         D   D   D
        SYSTEM                          D   D   D
        FILE
        ASIAN_FILE
        ANTIALIAS                           D   D
        COLOR                           D   D   D
        COLOR_BLEND                     D   D   D
        KERNING
        ITALIC_CORRECTION
        VERTICAL
        ============================== === === ===

    Complex line-breaking and bidi is handled by layout.

      - Currently broken on Win32/ATI (buggy alpha blending).

layout
    :description: XML/XHTML/CSS layout.
    :implementation:
        ====================================== =======
        Component                              GENERIC
        ====================================== =======
        HTML                                      D
        HTML_BUILDER                              D
        INLINE_FORMATTING                         D
        INLINE_REPLACED                           D
        FONTS                                     D
        ====================================== =======

gui
    :description: 2D graphical user interface.

    No implementation yet (current gui.py will be dropped in place of new
    layout and event APIs)
